eduardos-MBP:Trees2 eduardolowensohn$ ruby benchmark.rb
       user     system      total        real
tree insert  0.044010   0.000772   0.044782 (  0.045530)
heap insert  0.020191   0.000537   0.020728 (  0.021086)
       user     system      total        real
tree find  0.000023   0.000008   0.000031 (  0.000034)
heap find  0.000009   0.000000   0.000009 (  0.000010)
       user     system      total        real
tree delete  0.000016   0.000009   0.000025 (  0.000020)
heap delete  0.000007   0.000001   0.000008 (  0.000008)

Inserting, finding and deleting is much faster at the 
heap than with a normal binary tree. 




eduardos-MBP:heap eduardolowensohn$ rspec binary_heap_spec.rb
.................

Finished in 0.01432 seconds (files took 0.18821 seconds to load)
17 examples, 0 failures



duardos-MBP:binary_tree eduardolowensohn$ rspec binary_search_tree_spec.rb
......................

Finished in 0.01888 seconds (files took 0.23798 seconds to load)
22 examples, 0 failures



When would you use a Binary Search Tree and why?

-A Binary Search tree is probably best to use if the data needs to be structured
and sorted in a very exact manner. Every left-right child node in a BST is sorted
according to value, whereas in a heap the only specific structure necessary is
that parent node values must be higher (or lower, in cases of a min binary heap)
than their children.
The main difference on binary tree are the balance and unbalance binary tree.
On the balanced the childrens are sorted ina away that are even on the same lavel. I its unbalance,
the algorithm interchange the items in a way there will be the same quantity of items in
at the same level. The resultants will be that access to any of the items will be much faster
because the search will not have to go many up or downs for different levels.


When would you use an Heap and why?

If speed of insertion or finding is the most important element to you, it would
probably be best to use a heap structure.

Heap is usefull when you need a fast access to the max or minimun item, because that item will always be
the first item on the array or root of the tree.
Is good gor schedule, priority queues, 